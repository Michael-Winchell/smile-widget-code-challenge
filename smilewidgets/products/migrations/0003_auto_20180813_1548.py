# Generated by Django 2.0.7 on 2018-08-13 15:48

from django.db import migrations


def create_initial_product_prices(apps, schema_editor):
    product_price_model = apps.get_model('products', 'ProductPrice')
    product_model = apps.get_model('products', 'Product')

    initial_product_prices = [
        {
            'id': 1,
            'product': 1,
            'price': 80000,
            'start_date': '2018-11-23',
            'end_date': '2018-11-25',
            'sale_price': True
        },
        {
            'id': 2,
            'product': 2,
            'price': 0,
            'start_date': '2018-11-23',
            'end_date': '2018-11-25',
            'sale_price': True
        },
        {
            'id': 3,
            'product': 1,
            'price': 120000,
            'start_date': '2019-01-01',
            'end_date': None,
            'sale_price': False
        },
        {
            'id': 4,
            'product': 2,
            'price': 12500,
            'start_date': '2019-01-01',
            'end_date': None,
            'sale_price': False
        },
    ]

    for product_price_data in initial_product_prices:
        product = product_model.objects.filter(pk=product_price_data.get('product'))
        product_price = product_price_model(
            price=product_price_data.get('price'),
            start_date=product_price_data.get('start_date'),
            end_date=product_price_data.get('end_date'),
            sale_price=product_price_data.get('sale_price'),
        )
        # must save to establish database record
        product_price.save()
        # Many to Many must be assigned with set(queryset). Model.objects.create() doesn't handle this case
        product_price.product.set(product)
        product_price.save()


def convert_existing_product_prices(apps, schema_editor):
    product_price_model = apps.get_model('products', 'ProductPrice')
    product_model = apps.get_model('products', 'Product')

    for product in product_model.objects.all():
        product_price = product_price_model(
            price=product.price,
            start_date='1900-01-01',
            end_date='2018-12-31',
            sale_price=False,
        )
        # must save to establish database record
        product_price.save()
        # Many to Many must be assigned with set(queryset) . Model.objects.create() doesn't handle this case
        product_price.product.set(product_model.objects.filter(id=product.id))
        product_price.save()


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_productprice'),
    ]

    operations = [
        migrations.RunPython(create_initial_product_prices),
        migrations.RunPython(convert_existing_product_prices),
    ]
